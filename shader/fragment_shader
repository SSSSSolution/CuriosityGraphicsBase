#version 450 core
out vec4 FragColor;

// 点的纹理坐标
in vec2 TexCoords;
// 点的法向量
in vec3 Normal;
// 点的位置
in vec3 FragPos;
// 摄像机位置
uniform vec3 viewPos;

struct Material {
	sampler2D texture_diffuse1_;
	//sampler2D texture_ambient1_;
	sampler2D texture_specular1_;
	sampler2D texture_normal1_;

	float shininess_;
};

uniform Material material;

// 定向光
struct DirLight {
	vec3 direction_;

	vec3 diffuse_;
	vec3 ambient_;
	vec3 specular_;
};

uniform int dirLightCount;
uniform DirLight dirLights[8];

// 计算定向光贡献
vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir);

// 点光源
struct PointLight {
	vec3 position_;

	float constant_;
	float linear_;
	float quadratic_;

	vec3 ambient_;
	vec3 diffuse_;
	vec3 specular_;
};

uniform int pointLightCount;
uniform PointLight pointLights[64];

// 计算点光源贡献
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 viewDir);

// 聚光光源
struct SpotLight {
	vec3 position_;
	vec3 direction_;
	
	float cutOff_;
	float outCutOff_;

	vec3 ambient_;
	vec3 diffuse_;
	vec3 specular_;
};

uniform int spotLightCount;
uniform SpotLight spotLights[8];

// 计算聚光光源贡献
vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 viewDir);

void main()
{
	vec3 result = vec3(0.0f, 0.0f, 0.0f);
	vec3 norm = normalize(Normal);
	//vec3 norm = normalize(texture(material.texture_normal1_, TexCoords).rgb);
	vec3 viewDir = normalize(viewPos - FragPos);

	for (int i = 0; i < dirLightCount; i++) {
		result += CalcDirLight(dirLights[i], norm, viewDir);
	}

	for (int i = 0; i < pointLightCount; i++) {
		result += CalcPointLight(pointLights[i], norm, viewDir); 
	}

	for (int i = 0; i < spotLightCount; i++) {
		result += CalcSpotLight(spotLights[i], norm, viewDir);
	}

	FragColor = vec4(result, 1.0f);
}


vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir) {
	vec3 lightDir = normalize(-light.direction_);

	float diff = max(dot(normal, lightDir), 0.0);

	vec3 reflectDir = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0f);
	
	vec3 ambient = light.ambient_ * vec3(texture(material.texture_diffuse1_, TexCoords));
	vec3 diffuse = light.diffuse_ * diff * vec3(texture(material.texture_diffuse1_, TexCoords));
	vec3 specular = light.specular_ *  spec * vec3(texture(material.texture_specular1_, TexCoords));

	return (ambient + diffuse + specular);
}

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 viewDir) {
	vec3 lightDir = normalize(light.position_ - FragPos);

	float diff = max(dot(normal, lightDir), 0.0);
	
	vec3 reflectDir = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0f);

	float distance = length(light.position_ - FragPos);
	float attenuation = 1.0f / (light.constant_ + light.linear_ * distance +
						light.quadratic_ * (distance * distance));

	vec3 ambient = light.ambient_ * vec3(texture(material.texture_diffuse1_, TexCoords));
	vec3 diffuse = light.diffuse_ * diff * vec3(texture(material.texture_diffuse1_, TexCoords));
	vec3 specular = light.specular_ * spec * vec3(texture(material.texture_specular1_, TexCoords)); 

	ambient *= attenuation;
	diffuse *= attenuation;
	specular *= attenuation;

	return (ambient + diffuse + specular);
}

vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 viewDir) {
	vec3 lightDir = normalize(light.position_ - FragPos);

	float diff = max(dot(normal, lightDir), 0.0);

	vec3 reflectDir = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0f);

	float theta = dot(lightDir, normalize(-light.direction_));
	float epsilon = light.cutOff_ - light.outCutOff_;
	float intensity = clamp((theta - light.outCutOff_)/epsilon, 0.0, 1.0);

	vec3 ambient = light.ambient_ * vec3(texture(material.texture_diffuse1_, TexCoords));
	vec3 diffuse = intensity * light.diffuse_ * diff * vec3(texture(material.texture_diffuse1_, TexCoords));
	vec3 specular = intensity * light.specular_ * spec * vec3(texture(material.texture_specular1_, TexCoords));

	return ambient + diffuse + specular;
	//return diffuse;
}
